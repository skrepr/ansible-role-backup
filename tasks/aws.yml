---

# Create a bucket, add a policy from a file, enable requester pays, enable versioning and tag
- name: Create S3 bucket
  amazon.aws.s3_bucket:
    name: "{{ customer }}-{{ app }}-backup"
    versioning: true
    tags:
      Name: "{{ jira_key }}"
    profile: "{{ aws_profile }}"
    public_access:
      block_public_acls: true
      ignore_public_acls: true
      block_public_policy: true
      restrict_public_buckets: true
  delegate_to: localhost
  become: false
  vars:
    ansible_python_interpreter: /usr/local/bin/python3

- name: Create an IAM user
  amazon.aws.iam_user:
    name: "{{ customer }}-{{ app }}-backup"
    state: present
    tags:
      Name: "{{ jira_key }}"
    profile: "{{ aws_profile }}"
  delegate_to: localhost
  become: false
  vars:
    ansible_python_interpreter: /usr/local/bin/python3  # Because Path to correct python binary might change on MacOS

# Create a new S3 policy with prefix per user
- name: Create S3 policy from policy template
  amazon.aws.iam_policy:
    iam_type: user
    iam_name: "{{ customer }}-{{ app }}-backup"
    policy_name: "s3_limited_access_{{ customer }}_{{ app }}_backup"
    state: present
    policy_json: "{{ lookup('template', 'policy.json.j2') }}"
    profile: "{{ aws_profile }}"

  delegate_to: localhost
  become: false
  vars:
    ansible_python_interpreter: /usr/local/bin/python3  # Because Path to correct python binary might change on MacOS

- name: Create a new access key
  community.aws.iam_access_key:
    user_name: "{{ customer }}-{{ app }}-backup"
    state: present
    rotate_keys: true
    profile: "{{ aws_profile }}"
  register: access_key_result
  delegate_to: localhost
  become: false
  vars:
    ansible_python_interpreter: /usr/local/bin/python3  # Because Path to correct python binary might change on MacOS

- name: Run apt-get update
  ansible.builtin.apt:
    update_cache: true

- name: Install s3cmd package via apt
  ansible.builtin.package:
    name: s3cmd
    state: present

- name: S3 config file.
  become_user: "{{ backup_user }}"
  ansible.builtin.template:
    src: templates/s3cfg.j2
    dest: /{{ backup_user }}/.s3cfg
    owner: "{{ backup_user }}"
    group: "{{ backup_user }}"
    mode: 0600
  vars:
    access_key: "{{ access_key_result.access_key }}"
    secret_key: "{{ access_key_result.secret_access_key }}"
